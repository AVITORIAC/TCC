"""
Django settings for meinung project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
import os
from cryptography.fernet import Fernet

env = environ.Env(
    # definir o valor padrão de transmissão
    DEBUG = (bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = []

# chave de criptografia do banco de dados
FERNET_KEY = os.environ.get('FERNET_KEY')

if not FERNET_KEY:
    FERNET_KEY = Fernet.generate_key().decode()

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'drf_yasg',
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
]

AUTH_USER_MODEL = 'api.Usuario' # modelo de usuário 

ROLEPERMISSIONS_REGISTER_ADMIN = True # administradores têm permissão para registrar outros administradores dentro do sistema

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meinung.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meinung.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# configurações DRF
REST_FRAMEWORK = {
 'DEFAULT_FILTER_BACKENDS': [ # define o backend de filtro padrão a ser usado para consultas de API
    'django_filters.rest_framework.DjangoFilterBackend'
 ],
 'DEFAULT_AUTHENTICATION_CLASSES': [ # define as classes de autenticação padrão a serem usadas
    'rest_framework.authentication.TokenAuthentication',
    'api.authentication.ExpiraTokenAuth',
 ],
 'DEFAULT_RENDERER_CLASSES': [ # define as classes de renderização padrão
    'rest_framework.renderers.JSONRenderer', # as respostas das solicitações de API serão renderizadas como JSON por padrão
 ],
 'DEFAULT_PARSER_CLASSES': [ # define as classes de análise padrão, serão analisadas como JSON
    'rest_framework.parsers.JSONParser',
 ],
 'DEFAULT_PERMISSION_CLASSES': [ # define as classes de permissão
    'rest_framework.permissions.IsAuthenticated',
    'rest_framework.permissions.AllowAny',          
 ],
'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema', # define a classe de esquema padrão a ser usada para gerar a documentação da API, 
# que será gerada automaticamente com base nas views
}

# TOKEN_EXPIRE_AFTER_SECONDS = 5
# EXPIRING_TOKEN_LIFESPAN = datetime.timedelta(seconds=5)  # Define o tempo de expiração em segundos

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# APPEND_SLASH=False # caso queira deixar sem a barra no final da url

ROLEPERMISSIONS_MODULE = "meinung.roles"

# CORS
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "https://*",
    "https://localhost:5173" #frontend
]
 
# Configuração adicional, se necessário
CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']
CORS_ALLOW_HEADERS = ['Content-Type', 'Authorization']
CORS_ALLOW_CREDENTIALS = True  


# Arquivos de midia/upload
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads') # criando a pasta dentro do diretório